version: "3.9"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: sicetac-db
    environment:
      POSTGRES_USER: sicetac_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: sicetac_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sicetac_user"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: sicetac-cache
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Application
  app:
    build:
      context: .
      dockerfile: Dockerfile.prod
    container_name: sicetac-app
    env_file:
      - .env.production
    environment:
      DATABASE_URL: postgresql://sicetac_user:${DB_PASSWORD}@postgres:5432/sicetac_db
      REDIS_URL: redis://redis:6379/0
    ports:
      - "5050:5050"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
      - ./static_files:/app/static_files
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5050/api/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sicetac-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static_files:/usr/share/nginx/html/static
      - nginx_logs:/var/log/nginx
    depends_on:
      - app
    restart: unless-stopped

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: sicetac-backup
    environment:
      PGPASSWORD: ${DB_PASSWORD}
    volumes:
      - ./backups:/backups
      - ./scripts/backup.sh:/backup.sh
    entrypoint: ["/bin/sh"]
    command: ["-c", "while true; do /backup.sh; sleep 86400; done"]
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  nginx_logs: